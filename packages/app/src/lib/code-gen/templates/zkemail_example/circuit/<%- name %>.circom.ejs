pragma circom 2.1.6;
include "@zk-email/circuits/email-verifier.circom";
include "@zk-email/circuits/utils/regex.circom";
// regex-sdk currently does not support directly generating the regex for to and from address
include "@zk-email/zk-regex-circom/circuits/common/from_addr_regex.circom";
include "@zk-email/zk-regex-circom/circuits/common/to_addr_regex.circom";

<% values.forEach(function(value){ %>
include "./regex/<%- value.name %>Regex.circom";
<% }); %>

template <%- name %>(maxHeaderLength, maxBodyLength, n, k, packSize) {
    assert(n * k > 1024); // constraints for 1024 bit RSA

    signal input emailHeader[maxHeaderLength]; // prehashed email data, includes up to 512 + 64? bytes of padding pre SHA256, and padded with lots of 0s at end after the length
    signal input emailHeaderLength;
    signal input pubkey[k]; // rsa pubkey, verified with smart contract + DNSSEC proof. split up into k parts of n bits each.
    signal input signature[k]; // rsa signature. split up into k parts of n bits each.

    <% externalInputs.forEach(function(input) { %>
    signal input <%- input.name %>[<%- Math.floor(input.maxLength / 31) + (input.maxLength % 31 ? 1 : 0) %>];
    <% }) %>


    // DKIM Verification
    component EV = EmailVerifier(maxHeaderLength, maxBodyLength, n, k, <%- ignoreBodyHashCheck ? 1 : 0 %>);
    EV.emailHeader <== emailHeader;
    EV.emailHeaderLength <== emailHeaderLength;
    EV.pubkey <== pubkey;
    EV.signature <== signature;

    <% if (!ignoreBodyHashCheck) { %> 
    signal input bodyHashIndex;
    signal input precomputedSHA[32];
    signal input emailBody[maxBodyLength];
    signal input emailBodyLength;

    EV.bodyHashIndex <== bodyHashIndex;
    EV.precomputedSHA <== precomputedSHA;
    EV.emailBody <== emailBody;
    EV.emailBodyLength <== emailBodyLength;
    <% } %>

    signal output pubkeyHash;
    pubkeyHash <== EV.pubkeyHash;

    // Used for nullifier later
    signal headerHash[256] <== EV.sha;

<% values.forEach(function(value){ %>
    // <%- value.name.toUpperCase() %> Extraction
    signal input <%- value.name %>RegexIdx;
    var <%- value.name %>MaxLength = <%- value.maxLength %>;
    signal <%- value.name %>RegexOut, <%- value.name %>RegexReveal[<%- (value.location === 'body') ? 'maxBodyLength' : 'maxHeaderLength' %>];
<% if (["from", "to"].includes(value.location)) { %>
    (<%- value.name %>RegexOut, <%- value.name %>RegexReveal) <== <%- value.location === 'to' ? 'ToAddrRegex' : 'FromAddrRegex' %>(maxHeaderLength)(emailHeader);
<% } else { %>
    (<%- value.name %>RegexOut, <%- value.name %>RegexReveal) <== <%- value.name %>Regex(<%- (value.location === 'body') ? 'maxBodyLength' : 'maxHeaderLength' %>)(<%- (value.location === 'body') ? 'emailBody' : 'emailHeader' %>);
<% } %>
    <%- value.name %>RegexOut === 1;

    signal output <%- value.name %>PackedOut[computeIntChunkLength(<%- value.name %>MaxLength)];
    <%- value.name %>PackedOut <== PackRegexReveal(<%- (value.location === 'body') ? 'maxBodyLength' : 'maxHeaderLength' %>, <%- value.name %>MaxLength)(<%- value.name %>RegexReveal, <%- value.name %>RegexIdx);
<% }); %>

}

<% if (externalInputs.length > 0) {let public_args = externalInputs.map( i => i.name).join(", "); %>
component main { public [<%- public_args %>]} = <%- name %>(<%- emailHeaderMaxLength || 1024 %>, <%- ignoreBodyHashCheck ? 0 : emailBodyMaxLength %>, 121, 17, 7);
<% } else { %>
component main = <%- name %>(<%- emailHeaderMaxLength || 1024 %>, <%- ignoreBodyHashCheck ? 0 : emailBodyMaxLength %>, 121, 17, 7);
<% } %>