const { generateEmailVerifierInputs, packBytesIntoNBytes } = require("@zk-email/helpers");

export async function generateCircuitInputs(rawEmail, inputs) {
    const circuitInputs = await generateEmailVerifierInputs(rawEmail, {
        ignoreBodyHashCheck: <%- ignoreBodyHashCheck %>,
        maxBodyLength: <%- ignoreBodyHashCheck ? 0 : emailBodyMaxLength %>,
        maxHeadersLength: <%- emailHeaderMaxLength || 1024 %>,
        shaPrecomputeSelector: "<%- shaPrecomputeSelector.replaceAll('"', '\\\"') %>",
    },
    {
        domain: "<%- senderDomain %>",
    });

    const emailBodyString = circuitInputs.emailBody ? Buffer.from(circuitInputs.emailBody.map(Number)).toString('ascii') : null;
    const emailHeaderString = circuitInputs.emailHeader ? Buffer.from(circuitInputs.emailHeader.map(Number)).toString('ascii') : null;
    let regexInputs = {};
    <% values.forEach(function(value) { %>
    {
    <% if (value.location === "body") { %>
        const match = emailBodyString.match(new RegExp(<%- value.prefixRegex %>))
    <% } else { %>
        const match = emailHeaderString.match(new RegExp(<%- value.prefixRegex %>))
    <% } %>
        if (match) {
            regexInputs = {
                ...regexInputs,
                <%- value.name %>RegexIdx: match.index + match[0].length
            }
        } else {
            throw new Error(`Did not find a match for <%- value.name %> in the email sample`)
        }
    }
    <% }) %>

    const packedInputs = {};

    <% externalInputs.forEach(function(input) { %>
    {
        const key = "<%- input.name %>";
        const length = <%- Math.floor(input.maxLength / 31) + (input.maxLength % 31 ? 1 : 0) %>;
        packedInputs[key] = packBytesIntoNBytes(inputs[key] || "", 31).map(s => s.toString());
        while (packedInputs[key].length < length) {
            packedInputs[key].push("0");
        }
        if (packedInputs[key].length > length) {
            throw new Error(`Invalid input length for ${key} needs to be less than <%- input.maxLength %>`)
        }
    }
    <% }); %>

    return {
        ...circuitInputs,
        ...regexInputs,
        ...packedInputs
    }
}