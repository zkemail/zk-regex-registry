import * as path from "path";
// @ts-ignore
import { generateCircuitInputs } from "./lib/generate_inputs";
import { packedNBytesToString } from "@zk-email/helpers";

const wasm_tester = require("circom_tester").wasm;
const externalInputs = {
<% externalInputs.forEach(i => { %>
    <%- i.name %>: "",    
<% }) %>
}
// Either download the .eml file or click "show original" in your email client and copy the entire raw email (together with the headers)
const rawEmail = ``;

try {
    (async () => {
        if (!rawEmail || !rawEmail.includes("DKIM-Signature:")) {
            console.error("raw email is missing, update index.ts to paste the entire email (header + body)")
            process.exit(1);
        }
        let inputs = await generateCircuitInputs(rawEmail, externalInputs);
        console.log(inputs);

        const cir = await wasm_tester(
            path.join(__dirname, "./circuit/<%- name %>.circom"),
            {
                include: path.join(__dirname, "./node_modules"),
                output: path.join(__dirname, "./build/test_<%- name %>"),
                recompile: true,
                verbose: true,
            }
        );

        const witness = await cir.calculateWitness(
            inputs,
            true
        );
        await cir.checkConstraints(witness);

        let currentIndex = 2;
        <% values.forEach(function(value) { %>
        <% if (value.parts.find(a => a.is_public)) { // skip output unpacking when there isn't going to be an output%>
        {
            const packedLength = <%- Math.floor(value.maxLength / 31) + (value.maxLength % 31 ? 1 : 0) %>
            const packedValue = witness.slice(currentIndex, currentIndex + packedLength);
            const unpackedValue = packedNBytesToString(packedValue);
            console.log("<%- value.name %>: ", unpackedValue);
            currentIndex += packedLength;
        }
        <% }}) %>

        <% externalInputs.forEach(function(input) { %>
        {
            const packedLength = <%- Math.floor(input.maxLength / 31) + (input.maxLength % 31 ? 1 : 0) %>
            const packedValue = witness.slice(currentIndex, currentIndex + packedLength);
            const unpackedValue = packedNBytesToString(packedValue);
            console.log("<%- input.name %>: ", unpackedValue);
            currentIndex += packedLength;
        }
        <% }) %>
    })()
} catch (e) {
    console.error("caught error: ", e);
}